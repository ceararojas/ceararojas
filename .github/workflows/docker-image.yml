name: Build and Push Docker Image

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Define repo name
        run: echo "REPO_NAME=ecostor" >> $GITHUB_ENV

      - name: Define component details
        run: |
          # Define a list of components and their respective directories
          echo "COMPONENTS=rest_api,mbms >> $GITHUB_ENV
          echo "PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_ENV

      - name: Extract Git commit hash
        run: echo "GIT_COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker credentials
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine image tag
        id: tag
        run: |
          BRANCH=$(echo "${GITHUB_REF##*/}")
          if [ "$BRANCH" = "main" ]; then
            TAG="${{ env.GIT_COMMIT_HASH }}-main"
          elif [ "$BRANCH" = "development" ]; then
            TAG="${{ env.GIT_COMMIT_HASH }}-dev"
          else
            TAG="commit-feature"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build and Push Docker images
        run: |
          # Convert COMPONENTS string to an array
          IFS=',' read -r -a COMPONENTS_ARRAY <<< "${{ env.COMPONENTS }}"
          
          # Loop through each component and build/push its Docker image
          for COMPONENT in "${COMPONENTS_ARRAY[@]}"; do
            COMPONENT_NAME="$COMPONENT"
            COMPONENT_DIR="$COMPONENT"
            IMAGE_NAME="${{ env.REPO_NAME }}/$COMPONENT_NAME:${{ env.TAG }}"
            
            echo "Building and pushing Docker image for component: $COMPONENT_NAME"

            # Build and push Docker image
            docker buildx build \
              --platform ${{ env.PLATFORMS }} \
              -f $COMPONENT_DIR/Dockerfile \
              -t $IMAGE_NAME \
              --push $COMPONENT_DIR

            echo "Successfully built and pushed $IMAGE_NAME"
          done
