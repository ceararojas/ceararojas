name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch)'
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Define repo name
        id: repo-name
        run: echo "REPO_NAME=ceararojas/sys-testing" >> $GITHUB_ENV

      - name: Extract Git commit hash
        id: commit-hash
        run: echo "GIT_COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      - name: Read current version
        id: version
        run: echo "CURRENT_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Set Docker tags for images
        id: docker-tags
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"

          if [ "$BRANCH_NAME" = "main" ]; then
            # Increment version based on release_type
            VERSION="${CURRENT_VERSION}"
            MAJOR=$(echo $VERSION | cut -d '.' -f 1)
            MINOR=$(echo $VERSION | cut -d '.' -f 2)
            PATCH=$(echo $VERSION | cut -d '.' -f 3 | cut -d '-' -f 1)  # Remove pre-release part if exists

            if [ "$RELEASE_TYPE" = "major" ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "$RELEASE_TYPE" = "minor" ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif [ "$RELEASE_TYPE" = "patch" ]; then
              PATCH=$((PATCH + 1))
            fi

            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"

            VERSION_TAG="${NEW_VERSION}"
            VERSION_COMMIT_TAG="${NEW_VERSION}-${GIT_COMMIT_HASH}"
            TAGS="${REPO_NAME}:${VERSION_TAG},${REPO_NAME}:${VERSION_COMMIT_TAG}"

            # Update the VERSION file
            echo $NEW_VERSION > VERSION

          elif [ "$BRANCH_NAME" = "development" ]; then
            # Development branch uses commit-beta tag
            TAGS="${REPO_NAME}:${GIT_COMMIT_HASH}-beta"

          else
            # Other branches use just commit hash as tag
            TAGS="${REPO_NAME}:${GIT_COMMIT_HASH}"
            
          fi
          echo "DOCKER_TAGS=${TAGS}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKER_TAGS }}
