name: Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      system:
        description: 'Select system for deployment'
        required: true
        default: 'System A'
        type: choice
        options:
          - Klaus
          - Kalle
          - Kari
          - Klara
      services:
        description: 'Select services to deploy (comma-separated list, e.g., "New MBMS,Legacy MBMS")'
        required: true
        default: 'New MBMS'
        
jobs:
  fetch-tags:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.get-tags.outputs.tags }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Fetch Tags
        id: get-tags
        run: |
          tags=$(git tag -l --points-at HEAD)
          echo "::set-output name=tags::$(echo $tags | tr '\n' ',')"

  deploy:
    runs-on: ubuntu-latest
    needs: fetch-tags

    steps:
      - name: Print Available Tags
        run: |
          echo "Available tags: ${{ needs.fetch-tags.outputs.tags }}"
          echo "Selected Version: ${{ github.event.inputs.version }}"
          echo "Selected System: ${{ github.event.inputs.system }}"
          echo "Selected Services: ${{ github.event.inputs.services }}"

      - name: Validate Version
        run: |
          IFS=',' read -ra TAGS <<< "${{ needs.fetch-tags.outputs.tags }}"
          if [[ ! " ${TAGS[@]} " =~ " ${GITHUB_REF##*/} " ]]; then
            echo "Error: Selected version '${{ github.event.inputs.version }}' is not available."
            exit 1
          fi

      - name: Deploy Services
        run: |
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.services }}"
          for service in "${SERVICES[@]}"; do
            echo "Deploying ${service} version ${{ github.event.inputs.version }} to ${{ github.event.inputs.system }}"
            # Add deployment commands for each service here
            if [[ "$service" == "New MBMS" ]]; then
              # Deployment command for New MBMS
              echo "Deploying New MBMS..."
            elif [[ "$service" == "Legacy MBMS" ]]; then
              # Deployment command for Legacy MBMS
              echo "Deploying Legacy MBMS..."
            elif [[ "$service" == "REST API" ]]; then
              # Deployment command for REST API
              echo "Deploying REST API..."
            elif [[ "$service" == "Device Logger" ]]; then
              # Deployment command for Device Logger
              echo "Deploying Device Logger..."
            fi
          done

      - name: Complete Deployment
        run: echo "Deployment completed successfully!"
